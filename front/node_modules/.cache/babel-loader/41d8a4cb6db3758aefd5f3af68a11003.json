{"ast":null,"code":"var _jsxFileName = \"/home/oceane/Documents/Code/mylibrary/front/src/components/AddNewBook/AddNewBookForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styles from './AddNewBookForm.module.css';\nimport { StyledEngineProvider } from '@mui/material/styles';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button'; // import { addNewBook } from '../../libs/api';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddNewBookForm = () => {\n  _s();\n\n  const titleInputRef = useRef();\n  const authorInputRef = useRef();\n  const coverInputRef = useRef();\n  const navigationHistory = useNavigate();\n\n  const addNewBookSubmitHandler = event => {\n    event.preventDefault();\n    const title = titleInputRef.current.value;\n    const author = authorInputRef.current.value;\n    const image = coverInputRef.current.value;\n    console.log(title, author, image);\n    fetch('http://localhost:8080/addnewbook', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        title: title,\n        author: author,\n        image: image\n      })\n    }).then(response => {\n      if (response.status !== 200 || response.status !== 201) {\n        throw new Error('Adding a new book failed');\n      }\n\n      return response.json();\n    }).then(responseData => {\n      console.log(responseData);\n    }).catch(error => {\n      console.log(error);\n    });\n    navigationHistory('/myshelf');\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(StyledEngineProvider, {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: addNewBookSubmitHandler,\n        className: styles.newBookForm,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          id: \"title-input\",\n          variant: \"outlined\",\n          label: \"Title\",\n          required: true,\n          inputRef: titleInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"author-input\",\n          variant: \"outlined\",\n          label: \"Author\",\n          required: true,\n          inputRef: authorInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"image-input\",\n          variant: \"outlined\",\n          label: \"URL of the cover\",\n          required: true,\n          inputRef: coverInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          type: \"submit\",\n          className: styles.button,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddNewBookForm, \"j+R9migcw7c3SJOHuj+gG8XZlpc=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AddNewBookForm;\nexport default AddNewBookForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddNewBookForm\");","map":{"version":3,"sources":["/home/oceane/Documents/Code/mylibrary/front/src/components/AddNewBook/AddNewBookForm.js"],"names":["React","useRef","useNavigate","styles","StyledEngineProvider","TextField","Button","AddNewBookForm","titleInputRef","authorInputRef","coverInputRef","navigationHistory","addNewBookSubmitHandler","event","preventDefault","title","current","value","author","image","console","log","fetch","method","headers","body","JSON","stringify","then","response","status","Error","json","responseData","catch","error","newBookForm","button"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,SAASC,oBAAT,QAAqC,sBAArC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,MAAP,MAAmB,sBAAnB,C,CACA;;;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAC3B,QAAMC,aAAa,GAAGP,MAAM,EAA5B;AACA,QAAMQ,cAAc,GAAGR,MAAM,EAA7B;AACA,QAAMS,aAAa,GAAGT,MAAM,EAA5B;AAEA,QAAMU,iBAAiB,GAAGT,WAAW,EAArC;;AAEA,QAAMU,uBAAuB,GAAIC,KAAD,IAAW;AACzCA,IAAAA,KAAK,CAACC,cAAN;AAEA,UAAMC,KAAK,GAAGP,aAAa,CAACQ,OAAd,CAAsBC,KAApC;AACA,UAAMC,MAAM,GAAGT,cAAc,CAACO,OAAf,CAAuBC,KAAtC;AACA,UAAME,KAAK,GAAGT,aAAa,CAACM,OAAd,CAAsBC,KAApC;AAEAG,IAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ,EAAmBG,MAAnB,EAA2BC,KAA3B;AAEAG,IAAAA,KAAK,CAAC,kCAAD,EAAqC;AACxCC,MAAAA,MAAM,EAAE,MADgC;AAExCC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAF+B;AAGxCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEZ,QAAAA,KAAK,EAAEA,KAAT;AAAgBG,QAAAA,MAAM,EAAEA,MAAxB;AAAgCC,QAAAA,KAAK,EAAEA;AAAvC,OAAf;AAHkC,KAArC,CAAL,CAKGS,IALH,CAKSC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAApB,IAA2BD,QAAQ,CAACC,MAAT,KAAoB,GAAnD,EAAwD;AACtD,cAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACD;;AACD,aAAOF,QAAQ,CAACG,IAAT,EAAP;AACD,KAVH,EAWGJ,IAXH,CAWSK,YAAD,IAAkB;AACtBb,MAAAA,OAAO,CAACC,GAAR,CAAYY,YAAZ;AACD,KAbH,EAcGC,KAdH,CAcUC,KAAD,IAAW;AAChBf,MAAAA,OAAO,CAACC,GAAR,CAAYc,KAAZ;AACD,KAhBH;AAkBAxB,IAAAA,iBAAiB,CAAC,UAAD,CAAjB;AACD,GA5BD;;AA8BA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,2BACE,QAAC,oBAAD;AAAA,6BACE;AAAM,QAAA,QAAQ,EAAEC,uBAAhB;AAAyC,QAAA,SAAS,EAAET,MAAM,CAACiC,WAA3D;AAAA,gCACE,QAAC,SAAD;AACE,UAAA,EAAE,EAAC,aADL;AAEE,UAAA,OAAO,EAAC,UAFV;AAGE,UAAA,KAAK,EAAC,OAHR;AAIE,UAAA,QAAQ,MAJV;AAKE,UAAA,QAAQ,EAAE5B;AALZ;AAAA;AAAA;AAAA;AAAA,gBADF,eAQE,QAAC,SAAD;AACE,UAAA,EAAE,EAAC,cADL;AAEE,UAAA,OAAO,EAAC,UAFV;AAGE,UAAA,KAAK,EAAC,QAHR;AAIE,UAAA,QAAQ,MAJV;AAKE,UAAA,QAAQ,EAAEC;AALZ;AAAA;AAAA;AAAA;AAAA,gBARF,eAeE,QAAC,SAAD;AACE,UAAA,EAAE,EAAC,aADL;AAEE,UAAA,OAAO,EAAC,UAFV;AAGE,UAAA,KAAK,EAAC,kBAHR;AAIE,UAAA,QAAQ,MAJV;AAKE,UAAA,QAAQ,EAAEC;AALZ;AAAA;AAAA;AAAA;AAAA,gBAfF,eAsBE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,UAAhB;AAA2B,UAAA,IAAI,EAAC,QAAhC;AAAyC,UAAA,SAAS,EAAEP,MAAM,CAACkC,MAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAtBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAgCD,CArED;;GAAM9B,c;UAKsBL,W;;;KALtBK,c;AAuEN,eAAeA,cAAf","sourcesContent":["import React, { useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styles from './AddNewBookForm.module.css';\nimport { StyledEngineProvider } from '@mui/material/styles';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\n// import { addNewBook } from '../../libs/api';\n\nconst AddNewBookForm = () => {\n  const titleInputRef = useRef();\n  const authorInputRef = useRef();\n  const coverInputRef = useRef();\n\n  const navigationHistory = useNavigate();\n\n  const addNewBookSubmitHandler = (event) => {\n    event.preventDefault();\n\n    const title = titleInputRef.current.value;\n    const author = authorInputRef.current.value;\n    const image = coverInputRef.current.value;\n\n    console.log(title, author, image);\n\n    fetch('http://localhost:8080/addnewbook', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ title: title, author: author, image: image }),\n    })\n      .then((response) => {\n        if (response.status !== 200 || response.status !== 201) {\n          throw new Error('Adding a new book failed');\n        }\n        return response.json();\n      })\n      .then((responseData) => {\n        console.log(responseData);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n\n    navigationHistory('/myshelf');\n  };\n\n  return (\n    <React.Fragment>\n      <StyledEngineProvider>\n        <form onSubmit={addNewBookSubmitHandler} className={styles.newBookForm}>\n          <TextField\n            id=\"title-input\"\n            variant=\"outlined\"\n            label=\"Title\"\n            required\n            inputRef={titleInputRef}\n          />\n          <TextField\n            id=\"author-input\"\n            variant=\"outlined\"\n            label=\"Author\"\n            required\n            inputRef={authorInputRef}\n          />\n          <TextField\n            id=\"image-input\"\n            variant=\"outlined\"\n            label=\"URL of the cover\"\n            required\n            inputRef={coverInputRef}\n          />\n          <Button variant=\"outlined\" type=\"submit\" className={styles.button}>\n            Submit\n          </Button>\n        </form>\n      </StyledEngineProvider>\n    </React.Fragment>\n  );\n};\n\nexport default AddNewBookForm;\n"]},"metadata":{},"sourceType":"module"}